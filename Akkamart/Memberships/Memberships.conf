akka {
    actor {
        serializers.hyperion = "Akka.Serialization.HyperionSerializer, Akka.Serialization.Hyperion"
        serialization-bindings { "System.Object" = hyperion }
        provider = "Akka.Cluster.ClusterActorRefProvider, Akka.Cluster"
    }

    remote {
        dot-netty.tcp {
            port = 0
            hostname = {{OWN_HOST}}
        }
    }

    cluster {
        seed-nodes = ["akka.tcp://acme@{{SEED_NODE_HOST}}:{{SEED_NODE_PORT}}"]
        roles = [membermanager]
    }
    persistence {
        journal {
            plugin = "akka.persistence.journal.sql-server"
            sql-server {
                # qualified type name of the SQL Server persistence journal actor
                class = "Akka.Persistence.SqlServer.Journal.SqlServerJournal, Akka.Persistence.SqlServer"

                # dispatcher used to drive journal actor
                plugin-dispatcher = "akka.actor.default-dispatcher"

                # connection string used for database access
                connection-string = "{{SQLSERVER_CONNECTION}}"

                # default SQL commands timeout
                connection-timeout = 30s

                # SQL server schema name to table corresponding with persistent journal
                schema-name = dbo

                # SQL server table corresponding with persistent journal
                table-name = EventJournal

                # should corresponding journal table be initialized automatically
                auto-initialize = on

                # timestamp provider used for generation of journal entries timestamps
                timestamp-provider = "Akka.Persistence.Sql.Common.Journal.DefaultTimestampProvider, Akka.Persistence.Sql.Common"

                # metadata table
                metadata-table-name = Metadata

                #event-adapters {
                #    custom-adapter = "btm.persistence.CustomerEventAdapter, btm.persistence"
                #}
                #event-adapter-bindings {
                #    "btm.shared.Messages.PaymentStatusChangedMessage, Shared" = custom-adapter
                #}
            }
        }
        snapshot-store {
            plugin = "akka.persistence.snapshot-store.sql-server"
            sql-server {
                # qualified type name of the SQL Server persistence journal actor
                class = "Akka.Persistence.SqlServer.Snapshot.SqlServerSnapshotStore, Akka.Persistence.SqlServer"

                # dispatcher used to drive journal actor
                plugin-dispatcher = ""akka.actor.default-dispatcher""

                # connection string used for database access
                connection-string = "{{SQLSERVER_CONNECTION}}"

                # default SQL commands timeout
                connection-timeout = 30s

                # SQL server schema name to table corresponding with persistent journal
                schema-name = dbo

                # SQL server table corresponding with persistent journal
                table-name = SnapshotStore

                # should corresponding journal table be initialized automatically
                auto-initialize = on
            }
        }
        query.journal.sql {
            # Implementation class of the SQL ReadJournalProvider
            class = "Akka.Persistence.Query.Sql.SqlReadJournalProvider, Akka.Persistence.Query.Sql"

            # Absolute path to the write journal plugin configuration entry that this
            # query journal will connect to.
            # If undefined (or "") it will connect to the default journal as specified by the
            # akka.persistence.journal.plugin property.
            write-plugin = ""

            # The SQL write journal is notifying the query side as soon as things
            # are persisted, but for efficiency reasons the query side retrieves the events
            # in batches that sometimes can be delayed up to the configured `refresh-interval`.
            refresh-interval = 3s

            # How many events to fetch in one query (replay) and keep buffered until they
            # are delivered downstreams.
            max-buffer-size = 100
        }
    }
}
